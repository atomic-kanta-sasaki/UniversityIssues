import numpy as np
import matplotlib.pyplot as plt

data = np.array([[2.03, -0.00, 0], [-0.10, 2.44, 1], [-3.45, 2.02, 1], [2.62, -0.40, 0], [-2.39, 2.36, 1], [-2.10, 2.72, 1], [-1.58, 3.32, 1], [-0.71, 3.88, 1], [-2.47, 2.99, 1], [2.38, -0.21, 0], [0.29, 3.95, 1], [-0.95, 2.61, 1], [-2.86, 2.64, 1], [2.41, -0.04, 0], [4.74, -0.75, 0], [-1.87, 2.79, 1], [-2.32, 2.94, 1], [-1.12, -1.85, 2], [-1.33, 3.42, 1], [-2.38, -3.50, 2], [3.95, -0.24, 0], [-3.04, 1.63, 1], [3.62, 0.46, 0], [-0.56, 3.17, 1], [3.06, 1.71, 0], [0.50, -4.12, 2], [-2.26, -3.11, 2], [-0.90, 3.99, 1], [-1.36, 3.94, 1], [-2.36, 2.63, 1], [-0.47, -4.25, 2], [3.63, 0.05, 0], [-0.54, 1.19, 1], [-2.57, 4.22, 1], [1.80, -1.05, 0], [-0.30, 3.47, 1], [4.29, 0.40, 0], [0.19, -2.84, 2], [-0.92, -0.88, 2], [0.78, 1.33, 0], [-1.94, 4.00, 1], [-1.55, 1.79, 1], [-0.75, 1.76, 1], [3.31, 0.59, 0], [3.41, -0.80, 0], [2.40, 1.30, 0], [-1.08, -3.41, 2], [-2.51, -4.07, 2], [3.07, 0.89, 0], [-2.51, -1.25, 2], [3.49, -0.28, 0], [-1.96, -3.64, 2], [2.83, 0.22, 0], [2.76, 0.51, 0], [1.59, 0.89, 0], [3.76, 0.25, 0], [-1.91, -2.20, 2], [-1.29, -3.10, 2], [-0.34, 2.34, 1], [-1.58, -2.75, 2], [2.19, -1.75, 0], [-3.59, -1.83, 2], [-2.10, 2.91, 1], [1.17, -0.74, 0], [-0.06, 3.68, 1], [-2.02, 2.94, 1], [0.20, -2.38, 2], [-2.29, 3.27, 1], [0.07, 1.89, 1], [-1.68, 2.46, 1], [-0.51, 1.91, 1], [-1.57, 2.16, 1], [4.59, 0.43, 0], [-2.41, 2.79, 1], [-0.47, -2.69, 2], [-2.34, 1.93, 1], [-1.84, -1.71, 2], [-2.26, 2.36, 1], [0.18, 3.52, 1], [2.98, 0.06, 0], [4.13, -1.51, 0], [3.07, -1.12, 0], [-2.53, 2.30, 1], [-1.70, -1.75, 2], [-1.42, 2.75, 1], [4.08, -0.67, 0], [-0.45, -2.07, 2], [1.43, 0.48, 0], [4.80, -0.50, 0], [-2.92, 2.80, 1], [0.10, -3.82, 2], [-0.52, 2.29, 1], [3.39, 2.18, 0], [-2.21, 1.35, 1], [-1.30, -1.88, 2], [-2.64, 1.32, 1], [-0.07, 1.85, 1], [4.08, 0.12, 0], [-2.36, 1.11, 1], [-2.92, 3.44, 1]])

t = np.array([[]])

for k in range(len(data)):
    if data[k][2] == 2:
        t = np.append(t, [1])
    else:
        t = np.append(t, [0])
t = t[:, np.newaxis]
print(t)

Phi = np.array([ np.ones( len(data) ), data[:,0], data[:,1] ])
def sigmoid( x ):
    return 1.0 / (1.0 + np.exp(-x))

theta = np.array([[ 1.0, 1.0, 1.0]]).T # theta の初期値
theta = theta / np.linalg.norm( theta, ord=2 ) # theta を2次ノルムで正規化
eta = 0.1 # 学習率パラメータ
for loop in range( 100 ): # 学習世代数
    theta = theta + eta * np.dot( Phi, t - sigmoid( np.dot( Phi.T, theta ) ) ) # theta のバッチ学習
    theta = theta / np.linalg.norm(theta, ord=2)  # theta を2次ノルムで正規化 
for k in range( len( data ) ):
    if t[k]==1:
        plt.scatter( data[k,0], data[k,1], color='red' ) # t=1 を赤の点
    else:
        plt.scatter( data[k,0], data[k,1], color='blue' ) # t=-1 を青の点
xx = np.arange( -10.0, 10.1, 0.1 )
yy = -(theta[0] + xx * theta[1]) / theta[2]
plt.plot( xx, yy, color='magenta' )
plt.xlim( -10.0, +10.0 )
plt.ylim( -10.0, +10.0 )
plt.show()


print("=======================================================================================")

# Phi = np.array([ np.ones( len(data) ), data[:,0], data[:,1] ])
# theta = np.array([[ 1.0, 1.0, 1.0]]).T # theta の初期値
# theta = theta / np.linalg.norm( theta, ord=2 ) # theta を2次ノルムで正規化
# eta = 0.171 # 学習率パラメー
# while np.count_nonzero( np.dot( theta.T, Phi ).T * t < 0 ) > 0: # 識別失敗している点が存在している間、繰り返す
#     for k in range( len( data ) ):
#         if ( np.dot( theta.T, Phi ).T * t )[k] < 0.0 : # 識別失敗している場合
#             theta = theta + eta * Phi[0:3,k:k+1] * t[k] # theta の値を更新
#             theta = theta / np.linalg.norm(theta, ord=2)  # 2次ノルムで正規化 
#             print(np.count_nonzero( np.dot( theta.T, Phi ).T * t < 0 ))
# for k in range( len( data ) ):
#     if data[k][2] == 0:
#         plt.scatter(data[k, 0], data[k, 1],  color="red")
#     elif data[k][2] == 1:
#         plt.scatter(data[k, 0], data[k, 1], color="blue")
#     else:
#         plt.scatter(data[k, 0], data[k, 1], color="green")
# xx = np.arange(-10.5, 10.6, 0.1)
# theta_0 = [[float(-0.57433891)],
# [float(0.81657431)],
# [float(0.05780316)]]
 
# theta_1 = [[-0.63202206],
# [-0.45243203],
# [0.6291688]]
 
# theta_2 = [[-0.63870137],
# [-0.4409167 ],
# [-0.63059735]]

# yy = -(theta_0[0] + xx * theta_0[1]) / theta_0[2]
# yyy = -(theta_1[0] + xx * theta_1[1]) / theta_1[2]
# yyyy = -(theta_2[0] + xx * theta_2[1]) / theta_2[2]
# print(theta)
# plt.plot(xx, yy, color='black')
# plt.plot(xx, yyy, color='black' )
# plt.plot(xx, yyyy, color='black' )

# plt.xlim( -6.5, +6.5 )
# plt.ylim( -6.5, +6.5 )
# plt.show()
print("==============================終わり=========================================================")