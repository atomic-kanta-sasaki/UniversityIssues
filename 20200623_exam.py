import numpy as np
import matplotlib.pyplot as plt
import sklearn.cluster
import scipy.cluster.hierarchy
import scipy.spatial.distance

X = np.array([[ 0.792,  0.503], [ 1.632, -0.464], [-0.067,  0.268], [-1.044, -0.183], [ 1.767, -0.199], [ 1.906, -0.071], [ 0.962,  0.262], [ 0.887, -0.485], [ 0.869,  0.361], [ 1.154, -0.572], [-0.371,  0.722], [ 0.196, -0.264], [ 1.809, -0.195], [ 1.290, -0.324], [-0.824,  0.718], [ 0.986,  0.197], [ 0.582,  0.906], [ 0.276, -0.287], [ 0.317,  0.854], [-0.853,  0.932], [ 1.978,  0.010], [ 0.864, -0.463], [ 0.257,  1.004], [ 1.282, -0.287], [-0.230,  1.106], [ 0.229,  0.014], [ 1.895, -0.103], [ 1.865,  0.020], [ 0.098, -0.029], [ 0.104,  0.808], [ 0.908,  0.559], [-0.282,  0.697], [ 0.950, -0.429], [ 0.024,  0.231], [ 0.762,  0.702], [ 1.872,  0.236], [ 0.478, -0.164], [ 0.932,  0.072], [-0.813,  0.562], [-0.101,  0.404], [ 0.582, -0.468], [-0.378,  0.853], [ 0.628,  0.690], [ 0.122,  0.035], [ 1.543, -0.348], [-0.331,  1.000], [ 1.066,  0.133], [-0.715,  0.619], [ 0.164, -0.175], [ 0.933, -0.440], [-0.764,  0.827], [ 0.380, -0.202], [ 2.072,  0.035], [-0.812,  0.051], [ 1.106, -0.501], [ 0.783,  0.624], [ 0.519,  0.658], [ 1.154, -0.507], [ 0.201,  0.930], [-0.210,  1.007], [ 0.257, -0.249], [-1.037,  0.231], [ 1.721, -0.208], [ 0.925,  0.494], [ 1.089, -0.441], [-1.165,  0.253], [-0.175,  1.040], [ 1.516, -0.352], [ 0.108,  0.957], [-0.957,  0.513], [ 0.648, -0.487], [-1.023,  0.532], [ 0.313, -0.510], [-0.265,  0.581], [ 0.805, -0.372], [-0.946,  0.442], [ 0.065,  0.154], [ 0.950,  0.390], [ 0.559,  0.810], [ 0.726, -0.280], [ 2.031,  0.120], [-0.152,  0.958], [ 0.633, -0.564], [ 2.021,  0.519], [ 0.014,  0.232], [-0.331,  1.132], [ 0.910,  0.020], [-0.382,  0.971], [ 0.614, -0.386], [ 1.982,  0.351], [ 0.458,  0.894], [ 1.039,  0.389], [ 1.989,  0.184], [-0.671,  0.794], [ 2.020,  0.325], [ 1.780, -0.112], [ 1.749, -0.266], [ 0.491, -0.274], [-1.068,  0.297], [ 0.057,  0.027], [ 1.335, -0.698], [ 1.981,  0.369], [ 0.080,  1.159], [ 1.062, -0.048], [-0.814,  0.455], [ 0.111,  0.395], [-0.984,  0.081], [-0.504,  1.027], [ 1.566, -0.350], [ 0.200,  0.829], [-0.590,  0.792], [ 0.059,  1.047], [-0.086,  1.141], [-0.804,  0.368], [ 0.937,  0.353], [ 1.508, -0.569], [ 0.467,  0.658], [ 1.972,  0.175], [ 0.604, -0.401], [ 0.681,  0.427], [ 0.853,  0.624], [-0.635,  0.527], [-0.070,  0.299], [ 0.020,  0.994], [-0.126,  0.344], [-0.839,  0.700], [ 0.846, -0.012], [ 0.230,  0.077], [ 1.255, -0.392], [ 1.968,  0.550], [ 1.020,  0.354], [-0.531,  0.693], [-1.105,  0.486], [ 0.254, -0.189], [ 1.255, -0.332], [ 1.571, -0.083], [ 1.112, -0.329], [-1.051,  0.181], [ 2.037,  0.506], [ 0.837,  0.438], [ 0.027,  0.043], [-0.027,  0.505], [ 0.447,  0.996], [-0.478,  0.995], [-0.405,  0.886], [ 1.031,  0.102], [ 0.267,  0.116], [ 1.316, -0.468], [ 0.273,  1.069], [-0.024,  0.156], [ 0.478, -0.391], [ 1.683, -0.461], [ 0.833,  0.399], [ 0.327,  0.878], [ 0.675, -0.336], [-0.246,  0.939], [ 1.282, -0.476], [ 0.301, -0.084], [ 0.580,  1.016], [ 0.654,  0.778], [ 0.218,  0.024], [ 1.176, -0.514], [ 0.653,  0.843], [ 1.465, -0.288], [ 0.451, -0.482], [ 1.600, -0.020], [ 0.424,  0.861], [ 0.648, -0.373], [ 1.548, -0.383], [ 0.960, -0.653], [ 0.622,  0.881], [-1.143,  0.053], [-0.968,  0.539], [-0.691,  0.444], [ 0.183,  0.018], [ 0.935, -0.398], [ 1.708,  0.501], [-0.682,  0.626], [-0.706,  0.556], [ 0.501,  0.738], [ 1.476, -0.369], [-0.934,  0.477], [ 1.918,  0.206], [ 1.872, -0.337], [ 1.943,  0.313], [ 0.342,  1.016], [-0.071,  0.820], [ 0.838, -0.580], [-0.834,  0.392], [-0.652,  0.786], [-0.932,  0.403], [ 0.434,  0.956], [ 0.831,  0.454], [ 0.921,  0.260], [-0.037,  0.342], [-0.545,  0.871], [ 1.790,  0.209], [ 0.209, -0.001], [ 0.169,  1.019], [ 1.588, -0.191]])

# X = np.array([ [ 2.03, -0.00], [-0.10,  2.44], [-3.45,  2.02], [ 2.62, -0.40], [-2.39,  2.36],
# [-2.10,  2.72], [-1.58,  3.32], [-0.71,  3.88], [-2.47,  2.99], [ 2.38, -0.21], [ 0.29,  3.95],
# [-0.95,  2.61], [-2.86,  2.64], [ 2.41, -0.04], [ 4.74, -0.75], [-1.87,  2.79], [-2.32,  2.94],
# [-1.12, -1.85], [-1.33,  3.42], [-2.38, -3.50], [ 3.95, -0.24], [-3.04,  1.63], [ 3.62,  0.46],
# [-0.56,  3.17], [ 3.06,  1.71], [ 0.50, -4.12], [-2.26, -3.11], [-0.90,  3.99], [-1.36,  3.94],
# [-2.36,  2.63], [-0.47, -4.25], [ 3.63,  0.05], [-0.54,  1.19], [-2.57,  4.22], [ 1.80, -1.05],
# [-0.30,  3.47], [ 4.29,  0.40], [ 0.19, -2.84], [-0.92, -0.88], [ 0.78,  1.33], [-1.94,  4.00],
# [-1.55,  1.79], [-0.75,  1.76], [ 3.31,  0.59], [ 3.41, -0.80], [ 2.40,  1.30], [-1.08, -3.41],
# [-2.51, -4.07], [ 3.07,  0.89], [-2.51, -1.25], [ 3.49, -0.28], [-1.96, -3.64], [ 2.83,  0.22],
# [ 2.76,  0.51], [ 1.59,  0.89], [ 3.76,  0.25], [-1.91, -2.20], [-1.29, -3.10], [-0.34,  2.34],
# [-1.58, -2.75], [ 2.19, -1.75], [-3.59, -1.83], [-2.10,  2.91], [ 1.17, -0.74], [-0.06,  3.68],
# [-2.02,  2.94], [ 0.20, -2.38], [-2.29,  3.27], [ 0.07,  1.89], [-1.68,  2.46], [-0.51,  1.91],
# [-1.57,  2.16], [ 4.59,  0.43], [-2.41,  2.79], [-0.47, -2.69], [-2.34,  1.93], [-1.84, -1.71],
# [-2.26,  2.36], [ 0.18,  3.52], [ 2.98,  0.06], [ 4.13, -1.51], [ 3.07, -1.12], [-2.53,  2.30],
# [-1.70, -1.75], [-1.42,  2.75], [ 4.08, -0.67], [-0.45, -2.07], [ 1.43,  0.48], [ 4.80, -0.50],
# [-2.92,  2.80], [ 0.10, -3.82], [-0.52,  2.29], [ 3.39,  2.18], [-2.21,  1.35], [-1.30, -1.88],
# [-2.64,  1.32], [-0.07,  1.85], [ 4.08,  0.12], [-2.36,  1.11], [-2.92,  3.44]])

# t = np.array([0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1])

def laddering_cluster(X):
    Y = scipy.spatial.distance.pdist(X, 'euclidean')  #ユークリッド距離での距離行列

    # 単連結法でクラスタリング
    model = scipy.cluster.hierarchy.linkage(Y, method='single')
    scipy.cluster.hierarchy.dendrogram(model)
    plt.show()


def k_means(X):
    K=6
    model = sklearn.cluster.KMeans( n_clusters=K )
    model.fit( X )
    print( model.labels_ )
    col = ('red', 'blue', 'green', 'purple', 'cyan', 'yellow')  # 6クラスまで色分け 
    for i in range( X.shape[0] ):
        plt.scatter( X[i][0], X[i][1], color=col[ model.labels_[i]] ) # 各データをクラスごとに色分けして描画
    # 各クラスターの重心を描画
    for i in range( K ):
        plt.scatter( model.cluster_centers_[i][0], model.cluster_centers_[i][1], color=col[i], marker='*',s=100 )
    plt.show()

def dbscan(X):
    K = 3
    model = sklearn.cluster.DBSCAN(eps=2.0, min_samples=2)
    model.fit(X)

    print(model.labels_)
    col = ('black', 'red', 'blue', 'green', 'purple', 'cyan', 'yellow')  # 外れ値（-1)を黒に色分け

    for i in range(X.shape[0]):
        plt.scatter(X[i][0], X[i][1], color=col[model.labels_[i] + 1])  # 各データをクラスごとに色分けして描画

    plt.show()

print("1: 階層型クラスタリング、2: k-means法(非階層)、3: dbscan")
num = int(input())
if num == 1:
    print("1が選択されました")
    laddering_cluster(X)
elif num == 2:
    print("2が選択されました")
    k_means(X)
else:
    print("3が選択されました")
    dbscan(X)